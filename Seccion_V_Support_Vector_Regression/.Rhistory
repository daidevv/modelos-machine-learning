devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
remove.packages(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.6.tar.gz", repos = NULL, type="source")
install.packages("https://github.com/r-lib/rlang/tree/v1.0.6", repos = NULL, type="source")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages('rlang')
library(rlang)
detach("package:rlang", unload = TRUE)
library(rlang)
install.packages('rlang')
install.packages("rlang")
library(rlang)
install.packages("rlang")
install.packages("rlang")
library(rlang)
detach("package:rlang", unload = TRUE)
install.packages("rlang")
setwd("~/Documents/Cosas_Daiana/02_ Udemy/Machine Learning/00_Scripts/Seccion_V_Support_Vector_Regression")
install.packages("i1071")
library(e1071)
library(e1071)
?svm
dataset = read.csv("Position_Salaries.csv")
dataset =dataset[, 2:3]
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial")
View(regression)
View(regression)
regression[["kernel"]]
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
?svm
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 3)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 5)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 8)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 9.5)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 10)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 9.5)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
degree = 3,
cost = 9.5
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 9.5
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 9)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
degree = 3,
cost = 9)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
degree = 4,
cost = 9)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 9)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
setwd("~/Documents/Cosas_Daiana/02_ Udemy/Machine Learning/00_Scripts/Seccion_VI_Decission_tree_regression")
dataset = read.csv("Position_Salaries.csv")
dataset =dataset[, 2:3]
library(caTools)
library(rpart)
regression = rpart(formula = Salary ~ .,
data = datase)
regression = rpart(formula = Salary ~ .,
data = dataset)
View(regression)
View(regression)
View(regression)
View(dataset)
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción (modelo de regresion)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción con Árbol de Decisión (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (modelo de árbol de regresion)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
#SVR
#Plantilla de regresión
#Importamos el dataset
dataset = read.csv("Position_Salaries.csv")
dataset =dataset[, 2:3]
#Division de los datos para la fase de entrenamiento y para la fase de testing
#install.packages("caTools")
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# testing_set = subset(dataset, split == FALSE)
# #Escalado de valores num?ricos
# training_set[,2:3] = scale(testing_set[,2:3])
# testing_set[,2:3] = scale(testing_set[,2:3])
# Creacion (Ajuste) del Modelo de Regresión con el Conjunto de Datos
install.packages("e1071")
library(e1071)
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 9)
# Predicción de nuevos resultados con SVR
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
setwd("~/Documents/Cosas_Daiana/02_ Udemy/Machine Learning/00_Scripts/Seccion_V_Support_Vector_Regression")
#SVR
#Plantilla de regresión
#Importamos el dataset
dataset = read.csv("Position_Salaries.csv")
dataset =dataset[, 2:3]
#Division de los datos para la fase de entrenamiento y para la fase de testing
#install.packages("caTools")
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# testing_set = subset(dataset, split == FALSE)
# #Escalado de valores num?ricos
# training_set[,2:3] = scale(testing_set[,2:3])
# testing_set[,2:3] = scale(testing_set[,2:3])
# Creacion (Ajuste) del Modelo de Regresión con el Conjunto de Datos
install.packages("e1071")
library(e1071)
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 9)
# Predicción de nuevos resultados con SVR
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
install.packages("e1071")
library(e1071)
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 8)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
#SVR
#Plantilla de regresión
#Importamos el dataset
dataset = read.csv("Position_Salaries.csv")
dataset =dataset[, 2:3]
#Division de los datos para la fase de entrenamiento y para la fase de testing
#install.packages("caTools")
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# testing_set = subset(dataset, split == FALSE)
# #Escalado de valores num?ricos
# training_set[,2:3] = scale(testing_set[,2:3])
# testing_set[,2:3] = scale(testing_set[,2:3])
# Creacion (Ajuste) del Modelo de Regresión con el Conjunto de Datos
install.packages("e1071")
library(e1071)
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial",
cost = 9)
# Predicción de nuevos resultados con SVR
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
install.packages("e1071")
